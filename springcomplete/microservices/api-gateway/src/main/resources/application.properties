spring.application.name=api-gateway
server.port=8079

# Erueka client
# Here we have to add the user and password from eureka (api-gateway)
eureka.client.service-url.default-zone=http://eureka:password@eurekalocalhost:8761/eureka
# This is works well in the case that we have multiple instances of a same microservice
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

# Inventory service routes
spring.cloud.gateway.routes[0].id=inventory-service
# We need to define a lb (load balance) which spring boot uses dinamically to have
# a good load balance between microservices
spring.cloud.gateway.routes[0].uri=lb://inventory-service
#spring.cloud.gateway.routes[0].uri=http://localhost:8083
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/inventory/**

# Order service routes
spring.cloud.gateway.routes[1].id=orders-service
# We need to define a lb (load balance) which spring boot uses dinamically to have
# a good load balance between microservices
spring.cloud.gateway.routes[1].uri=lb://orders-service
#spring.cloud.gateway.routes[1].uri=http://localhost:8082
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/order/**

# Product service routes
spring.cloud.gateway.routes[2].id=products-service
# We need to define a lb (load balance) which spring boot uses dinamically to have
# a good load balance between microservices
spring.cloud.gateway.routes[2].uri=lb://products-service
#spring.cloud.gateway.routes[2].uri=http://localhost:8081
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/product/**

# Discovery server routes
spring.cloud.gateway.routes[3].id=discovery-service
spring.cloud.gateway.routes[3].uri=http://localhost:8761
spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/web
spring.cloud.gateway.routes[3].filters[0]=SetPath=/

# Discovery Server Static routes
# Static resources from this server
# This is to view the images and resources that are showed in the server eureka
spring.cloud.gateway.routes[4].id=discovery-service-static
spring.cloud.gateway.routes[4].uri=http://localhost:8761
spring.cloud.gateway.routes[4].predicates[0]=Path=/eureka/**

# We will add a couple of filters
# To define the route behaviour and management of sessions and tokens
spring.cloud.gateway.default-filters[0]=SaveSession
spring.cloud.gateway.default-filters[1]=TokenRelay

# Keycloak configuration
# This configuration is to check the validity of the tokens sent by keycloak
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8181/realms/microservices-realm
# Indentity provider, we have to define the scope, in this case openid
# which means that we only need to provide the basic credentials of a user
spring.security.oauth2.client.registration.keycloak.provider=keycloak
spring.security.oauth2.client.registration.keycloak.scope=openid
# This client was created previously on keycloak
spring.security.oauth2.client.registration.keycloak.client-id=microservices_client
spring.security.oauth2.client.registration.keycloak.client-secret=k5Mcbg9rNlM9zWzOSDIi8lrZ96GUx2Kb
# authorization_code: the client obtains an authorization code after the user is authenticated
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
# Where keycloak will redirect
# This url must be registered on keycloak's client
spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/login/oauth2/code/keycloak

# Log
logging.level.root=info
#logging.level.org.springframework.cloud.gateway=debug
# See a more detailed register level
logging.level.org.springframework.cloud.gateway=trace
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator=info